{"version":3,"sources":["Editor.js","Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["freeCodeCamp","icon","faFreeCodeCamp","Editor","props","id","className","classes","style","editorExpand","width","margin","onClick","setEditorExpand","minHeight","value","input","onChange","event","setInput","target","linkBlock","href","children","match","rel","Previewer","previewerExpand","setPreviewerExpand","plugins","gfm","source","renderers","link","ExpandArrowsAlt","faExpandArrowsAlt","CompressAlt","faCompressAlt","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAMMA,EAAe,cAAC,IAAD,CAAiBC,KAAMC,MA2B7BC,EAxBA,SAACC,GAEZ,OACI,sBAAKC,GAAG,iBAAiBC,UAAS,yBAAoBF,EAAMG,QAAQ,IAAMC,MAAOJ,EAAMK,aAAe,CAACC,MAAM,MAAOC,OAAO,SAAW,GAAtI,UACI,sBAAKL,UAAU,UAAUE,MAAOJ,EAAMK,aAAe,CAACC,MAAM,SAAU,GAAtE,UACI,+BAAOV,IADX,UAEI,wBACAY,QAAS,WACLR,EAAMS,iBAAiBT,EAAMK,eAFjC,SAIEL,EAAMG,QAAQ,QAEpB,0BACAC,MAAOJ,EAAMK,aAAe,CAACK,UAAU,SAAU,GACjDC,MAAOX,EAAMY,MACbC,SAAU,SAACC,GACPd,EAAMe,SAASD,EAAME,OAAOL,c,2CClBtCM,EAAY,SAACjB,GAAwD,IAC/DkB,EAAmBlB,EAAnBkB,KAAMC,EAAanB,EAAbmB,SAEd,OAAID,EAAKE,MAAM,QAEP,mBAAGF,KAAMA,EAAMF,OAAO,SAASK,IAAI,sBAAnC,SACKF,IAIN,mBAAGD,KAAMA,EAAT,SAAgBC,KAIrBvB,EAAe,cAAC,IAAD,CAAiBC,KAAMC,MAqB7BwB,EAnBG,SAACtB,GACf,OACI,sBAAKC,GAAG,oBAAoBC,UAAS,4BAAuBF,EAAMG,QAAQ,IAAOC,MAAOJ,EAAMuB,gBAAkB,CAACjB,MAAM,OAAS,GAAhI,UACI,sBAAKJ,UAAU,UAAUE,MAAOJ,EAAMuB,gBAAkB,CAACjB,MAAM,SAAW,GAA1E,UACI,+BAAOV,IADX,aAEI,wBACAY,QAAS,WACLR,EAAMwB,oBAAoBxB,EAAMuB,kBAFpC,SAIEvB,EAAMG,QAAQ,QAEpB,qBAAKF,GAAG,YAAR,SACI,cAAC,IAAD,CAAewB,QAASC,IAAKC,OAAQ3B,EAAMY,MAAOgB,UAAW,CAACC,KAAOZ,W,iBC3B/Ea,EAAkB,cAAC,IAAD,CAAiBjC,KAAMkC,MACzCC,EAAc,cAAC,IAAD,CAAiBnC,KAAMoC,MAmF5BC,EAjFH,WAAO,IAAD,EACUC,mBAAS,4oCADnB,mBACTvB,EADS,KACFG,EADE,OAiDwBoB,oBAAS,GAjDjC,mBAiDT9B,EAjDS,KAiDKI,EAjDL,OAkD8B0B,oBAAS,GAlDvC,mBAkDTZ,EAlDS,KAkDQC,EAlDR,KAoDVrB,EACJE,EACA,CAAC,SAAU,OAAQ2B,GACnBT,EACA,CAAC,OAAQ,SAAUS,GACnB,CAAC,GAAI,GAAIF,GAGX,OACE,sBAAK7B,GAAG,UAAR,UACE,cAAC,EAAD,CACAW,MAAOA,EACPG,SAAUA,EACVV,aAAcA,EACdI,gBAAiBA,EACjBN,QAASA,IAGT,cAAC,EAAD,CACAS,MAAOA,EACPW,gBAAiBA,EACjBC,mBAAoBA,EACpBrB,QAASA,QCzEAiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5f172680.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./Editor.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFreeCodeCamp} from '@fortawesome/free-brands-svg-icons';\n\n\nconst freeCodeCamp = <FontAwesomeIcon icon={faFreeCodeCamp} />\n\n\nconst Editor = (props) => {\n\n    return(\n        <div id=\"editor-wrapper\" className={`editor-wrapper ${props.classes[0]}`} style={props.editorExpand ? {width:\"99%\", margin:\"2em 0\"} : {}}>\n            <div className=\"toolbar\" style={props.editorExpand ? {width:\"99.5%\"} :{}}>\n                <span>{freeCodeCamp}</span> Editor \n                <button\n                onClick={() => {\n                    props.setEditorExpand(!props.editorExpand)\n                }}\n                >{props.classes[2]}</button>\n            </div>\n            <textarea\n            style={props.editorExpand ? {minHeight:\"100vh\"} :{}}\n            value={props.input}\n            onChange={(event) => {\n                props.setInput(event.target.value)\n            }}\n            >\n            </textarea>\n        </div>\n    )\n}\n\nexport default Editor;","import React from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport \"./Previewer.css\";\nimport gfm from 'remark-gfm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFreeCodeCamp} from '@fortawesome/free-brands-svg-icons';\n\nconst linkBlock = (props: { href: string; children: React.ReactNode }) => {\n    const { href, children } = props;\n\n    if (href.match('http')) {\n        return (\n            <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {children}\n            </a>\n        );\n    }\n    return <a href={href}>{children}</a>;\n};\n\n\nconst freeCodeCamp = <FontAwesomeIcon icon={faFreeCodeCamp} />\n\nconst Previewer = (props) => {\n    return(\n        <div id=\"previewer-wrapper\" className={`previewer-wrapper ${props.classes[1]}`}  style={props.previewerExpand ? {width:\"98%\"} : {}}>\n            <div className=\"toolbar\" style={props.previewerExpand ? {width:\"99.1%\"} : {}}>\n                <span>{freeCodeCamp}</span> Previewer\n                <button\n                onClick={() => {\n                    props.setPreviewerExpand(!props.previewerExpand)\n                }}\n                >{props.classes[2]}</button>\n            </div>\n            <div id=\"previewer\">\n                <ReactMarkdown plugins={gfm} source={props.input} renderers={{link : linkBlock}}>\n                </ReactMarkdown>\n            </div>\n        </div>\n    )\n}\n\nexport default Previewer","import React, {useState} from \"react\";\nimport Editor from \"./Editor\";\nimport Previewer from \"./Previewer\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExpandArrowsAlt} from '@fortawesome/free-solid-svg-icons';\nimport { faCompressAlt} from '@fortawesome/free-solid-svg-icons';\n\nconst ExpandArrowsAlt = <FontAwesomeIcon icon={faExpandArrowsAlt}/>\nconst CompressAlt = <FontAwesomeIcon icon={faCompressAlt}/>\n\nconst App = () => {\n  const [input, setInput] = useState(`\n  # Welcome to my React Markdown Previewer!\n\n  ## This is a sub-heading...\n  ### And here's some other cool stuff:\n\n  Heres some code, \\`\\`\\` <div></div> \\`\\`\\`, between 2 backticks.\n\n  \\`\\`\\`\n  // this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!  \nOr _italic_.    \nOr... wait for it... **_both!_**  \nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n        \n![React Logo w/ Text](https://goo.gl/Umyytc)\n  `\n  )\n\n  //Expand or hide\n  const [editorExpand, setEditorExpand] = useState(false);\n  const [previewerExpand, setPreviewerExpand] = useState(false); \n  \n  const classes = \n    editorExpand \n  ? [\"expand\", \"hide\", CompressAlt]\n  : previewerExpand \n  ? [\"hide\", \"expand\", CompressAlt]\n  : [\"\", \"\", ExpandArrowsAlt]; \n  \n\n  return(\n    <div id=\"wrapper\">\n      <Editor \n      input={input}\n      setInput={setInput}\n      editorExpand={editorExpand}\n      setEditorExpand={setEditorExpand}\n      classes={classes}\n      \n      />\n      <Previewer \n      input={input}\n      previewerExpand={previewerExpand}\n      setPreviewerExpand={setPreviewerExpand}\n      classes={classes}\n      \n      />\n    </div>\n  )\n  }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}